#--
# DO NOT MODIFY!!!!
# This file is automatically generated by rex 1.0.5
# from lexical definition file "Drewby.rex".
#++

require 'racc/parser'
class DrewbyParser < Racc::Parser
  require 'strscan'

  class ScanError < StandardError ; end

  attr_reader   :lineno
  attr_reader   :filename
  attr_accessor :state

  def scan_setup(str)
    @ss = StringScanner.new(str)
    @lineno =  1
    @state  = nil
  end

  def action
    yield
  end

  def scan_str(str)
    scan_setup(str)
    do_parse
  end
  alias :scan :scan_str

  def load_file( filename )
    @filename = filename
    open(filename, "r") do |f|
      scan_setup(f.read)
    end
  end

  def scan_file( filename )
    load_file(filename)
    do_parse
  end


  def next_token
    return if @ss.eos?
    
    # skips empty actions
    until token = _next_token or @ss.eos?; end
    token
  end

  def _next_token
    text = @ss.peek(1)
    @lineno  +=  1  if text == "\n"
    token = case @state
    when nil
      case
      when (text = @ss.scan(/\s+/i))
        ;

      when (text = @ss.scan(/\+/i))
         action { [:PLUS, text] }

      when (text = @ss.scan(/\-/i))
         action { [:MINUS, text] }

      when (text = @ss.scan(/\*/i))
         action { [:MULTIPLY, text] }

      when (text = @ss.scan(/\//i))
         action { [:DIVIDE, text] }

      when (text = @ss.scan(/\%/i))
         action { [:MODULO, text] }

      when (text = @ss.scan(/\>/i))
         action { [:GREATERTHAN, text] }

      when (text = @ss.scan(/\</i))
         action { [:LESSERTHAN, text] }

      when (text = @ss.scan(/\==/i))
         action { [:EQUAL, text] }

      when (text = @ss.scan(/\!=/i))
         action { [:NOTEQUAL, text] }

      when (text = @ss.scan(/\=/i))
         action { [:ASSIGN, text] }

      when (text = @ss.scan(/\(/i))
         action { [:LPAREN, text] }

      when (text = @ss.scan(/\)/i))
         action { [:RPAREN, text] }

      when (text = @ss.scan(/\;/i))
         action { [:SEMICOLON, text] }

      when (text = @ss.scan(/\{/i))
         action { [:LBRACKET, text] }

      when (text = @ss.scan(/\}/i))
         action { [:RBRACKET, text] }

      when (text = @ss.scan(/print/i))
         action { [:PRINT, text] }

      when (text = @ss.scan(/while/i))
         action { [:WHILE, text] }

      when (text = @ss.scan(/if/i))
         action { [:IF, text] }

      when (text = @ss.scan(/else/i))
         action { [:ELSE, text] }

      when (text = @ss.scan(/\d+/i))
         action { [:NUMBER, text.to_i] }

      when (text = @ss.scan(/\"[^"]*\"/i))
         action { [:STRING, text] }

      when (text = @ss.scan(/[a-zA-Z]*/i))
         action { [:VARIABLE, text] }

      when (text = @ss.scan(/./i))
         action {  [text, text] }

      else
        text = @ss.string[@ss.pos .. -1]
        raise  ScanError, "can not match: '" + text + "'"
      end  # if

    else
      raise  ScanError, "undefined state: '" + state.to_s + "'"
    end  # case state
    token
  end  # def _next_token

end # class
