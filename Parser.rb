#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'
class DrewbyParser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
    26,    27,    24,    25,    28,    22,    23,    20,    21,    10,
    17,    16,    18,    44,    45,    43,    26,    27,    24,    25,
    28,    22,    23,    20,    21,     9,     3,   nil,   nil,   nil,
   nil,    41,    26,    27,    24,    25,    28,    22,    23,    20,
    21,    15,   nil,   nil,    15,    15,    13,    42,    12,    13,
    13,   nil,    14,    15,    15,    14,    14,    15,    13,    13,
   nil,    15,    13,   nil,    14,    14,    13,   nil,    14,    15,
    15,    15,    14,    15,    13,    13,    13,   nil,    13,   nil,
    14,    14,    14,    15,    14,    15,    15,   nil,    13,   nil,
    13,    13,   nil,   nil,    14,   nil,    14,    14,     4,     4,
     5,     5,     6,     6,   nil,   nil,    48,     7,     7,     4,
   nil,     5,   nil,     6,   nil,   nil,   nil,    49,     7,    26,
    27,    24,    25,    28,    22,    23,    20,    21,    26,    27,
    24,    25,    28,    22,    23,    20,    21 ]

racc_action_check = [
    31,    31,    31,    31,    31,    31,    31,    31,    31,     4,
     7,     6,     8,    42,    43,    31,    29,    29,    29,    29,
    29,    29,    29,    29,    29,     3,     1,   nil,   nil,   nil,
   nil,    29,    30,    30,    30,    30,    30,    30,    30,    30,
    30,    10,   nil,   nil,    23,     5,    10,    30,     5,    23,
     5,   nil,    10,    24,    28,    23,     5,    21,    24,    28,
   nil,    22,    21,   nil,    24,    28,    22,   nil,    21,    13,
    16,    17,    22,    26,    13,    16,    17,   nil,    26,   nil,
    13,    16,    17,    20,    26,    25,    27,   nil,    20,   nil,
    25,    27,   nil,   nil,    20,   nil,    25,    27,    46,     2,
    46,     2,    46,     2,   nil,   nil,    46,    46,     2,    47,
   nil,    47,   nil,    47,   nil,   nil,   nil,    47,    47,    19,
    19,    19,    19,    19,    19,    19,    19,    19,    11,    11,
    11,    11,    11,    11,    11,    11,    11 ]

racc_action_pointer = [
   nil,    26,    87,    25,    -4,    33,    -6,    -7,   -10,   nil,
    29,   125,   nil,    57,   nil,   nil,    58,    59,   nil,   116,
    71,    45,    49,    32,    41,    73,    61,    74,    42,    13,
    29,    -3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    -6,    -5,   nil,   nil,    86,    97,   nil,   nil ]

racc_action_default = [
    -8,   -21,    -1,   -21,   -21,   -21,   -21,   -21,   -21,    50,
   -21,    -3,    -4,   -21,   -19,   -20,   -21,   -21,    -7,    -2,
   -21,   -21,   -21,   -21,   -21,   -21,   -21,   -21,   -21,   -21,
   -21,   -21,    -9,   -10,   -11,   -12,   -13,   -14,   -15,   -16,
   -17,   -18,   -21,   -21,    -8,    -8,   -21,   -21,    -5,    -6 ]

racc_goto_table = [
     2,    11,     1,   nil,   nil,   nil,    19,   nil,   nil,    29,
   nil,   nil,    30,    31,   nil,   nil,    32,    33,    34,    35,
    36,    37,    38,    39,    40,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    46,    47 ]

racc_goto_check = [
     2,     4,     1,   nil,   nil,   nil,     4,   nil,   nil,     4,
   nil,   nil,     4,     4,   nil,   nil,     4,     4,     4,     4,
     4,     4,     4,     4,     4,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,     2,     0,   nil,    -4 ]

racc_goto_default = [
   nil,   nil,   nil,     8,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 25, :_reduce_1,
  3, 27, :_reduce_2,
  2, 27, :_reduce_3,
  2, 27, :_reduce_4,
  7, 27, :_reduce_5,
  7, 27, :_reduce_6,
  3, 26, :_reduce_7,
  0, 26, :_reduce_8,
  3, 28, :_reduce_9,
  3, 28, :_reduce_10,
  3, 28, :_reduce_11,
  3, 28, :_reduce_12,
  3, 28, :_reduce_13,
  3, 28, :_reduce_14,
  3, 28, :_reduce_15,
  3, 28, :_reduce_16,
  3, 28, :_reduce_17,
  3, 28, :_reduce_18,
  1, 28, :_reduce_19,
  1, 28, :_reduce_20 ]

racc_reduce_n = 21

racc_shift_n = 50

racc_token_table = {
  false => 0,
  :error => 1,
  :UMINUS => 2,
  :MULTIPLY => 3,
  :DIVIDE => 4,
  :PLUS => 5,
  :MINUS => 6,
  :MODULO => 7,
  :EQUAL => 8,
  :NOTEQUAL => 9,
  :GREATERTHAN => 10,
  :LESSERTHAN => 11,
  :VARIABLE => 12,
  :ASSIGN => 13,
  :PRINT => 14,
  :STRING => 15,
  :IF => 16,
  :LPAREN => 17,
  :RPAREN => 18,
  :LBRACKET => 19,
  :RBRACKET => 20,
  :WHILE => 21,
  :SEMICOLON => 22,
  :NUMBER => 23 }

racc_nt_base = 24

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UMINUS",
  "MULTIPLY",
  "DIVIDE",
  "PLUS",
  "MINUS",
  "MODULO",
  "EQUAL",
  "NOTEQUAL",
  "GREATERTHAN",
  "LESSERTHAN",
  "VARIABLE",
  "ASSIGN",
  "PRINT",
  "STRING",
  "IF",
  "LPAREN",
  "RPAREN",
  "LBRACKET",
  "RBRACKET",
  "WHILE",
  "SEMICOLON",
  "NUMBER",
  "$start",
  "target",
  "statementList",
  "statement",
  "expression" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'Drewby.racc', 9)
  def _reduce_1(val, _values, result)
     result = AST::ASTNode.new({sub_statements:val[0]}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Drewby.racc', 11)
  def _reduce_2(val, _values, result)
     result = AST::AssignVariableStatement.new({variable_name:val[0], expression:val[2]}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Drewby.racc', 12)
  def _reduce_3(val, _values, result)
     result = AST::PrintStatement.new({expression:val[1]}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Drewby.racc', 13)
  def _reduce_4(val, _values, result)
     result = AST::PrintStringStatement.new({text:val[1]}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Drewby.racc', 14)
  def _reduce_5(val, _values, result)
     result = AST::IfStatement.new({expression:val[2], statements:val[5]}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Drewby.racc', 15)
  def _reduce_6(val, _values, result)
     result = AST::WhileStatement.new({expression:val[2], statements:val[5]}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Drewby.racc', 17)
  def _reduce_7(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'Drewby.racc', 18)
  def _reduce_8(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'Drewby.racc', 20)
  def _reduce_9(val, _values, result)
     result = AST::GreaterThanExpression.new({left_expression:val[0], right_expression:val[2]}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Drewby.racc', 21)
  def _reduce_10(val, _values, result)
     result = AST::LesserThanExpression.new({left_expression:val[0], right_expression:val[2]}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Drewby.racc', 22)
  def _reduce_11(val, _values, result)
     result = AST::EqualExpression.new({left_expression:val[0], right_expression:val[2]}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Drewby.racc', 23)
  def _reduce_12(val, _values, result)
     result = AST::NotEqualExpression.new({left_expression:val[0], right_expression:val[2]}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Drewby.racc', 24)
  def _reduce_13(val, _values, result)
     result = AST::AddExpression.new({left_expression:val[0], right_expression:val[2]}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Drewby.racc', 25)
  def _reduce_14(val, _values, result)
     result = AST::SubtractExpression.new({left_expression:val[0], right_expression:val[2]}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Drewby.racc', 26)
  def _reduce_15(val, _values, result)
     result = AST::MultiplyExpression.new({left_expression:val[0], right_expression:val[2]}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Drewby.racc', 27)
  def _reduce_16(val, _values, result)
     result = AST::DivideExpression.new({left_expression:val[0], right_expression:val[2]}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Drewby.racc', 28)
  def _reduce_17(val, _values, result)
     result = AST::ModuloExpression.new({left_expression:val[0], right_expression:val[2]}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Drewby.racc', 29)
  def _reduce_18(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'Drewby.racc', 30)
  def _reduce_19(val, _values, result)
     result = AST::LoadConstantExpression.new({value:val[0]}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Drewby.racc', 31)
  def _reduce_20(val, _values, result)
     result = AST::LoadVariableExpression.new({variable_name:val[0]}) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class DrewbyParser
